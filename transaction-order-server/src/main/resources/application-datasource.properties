############################################# db config ################################################################
spring.datasource.druid.url=jdbc:mysql://localhost:3306/seata_order?allowMultiQueries=true&zeroDateTimeBehavior=convertToNull&autoReconnect=true&useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
spring.datasource.druid.username=root
spring.datasource.druid.password=root
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
# druid - 连接池配置
## 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.druid.initial-size=10
## 连接池中最多支持多少个活动会话
spring.datasource.druid.max-active=20
## 最小连接池数量
spring.datasource.druid.min-idle=5
## 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
#spring.datasource.druid.max-wait=60000
## 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements=false
## 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=-1
## 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
spring.datasource.druid.validation-query=select 'x'
## 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
spring.datasource.druid.validation-query-timeout=1
## 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-borrow=true
## 	归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-return=false
## 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle=true
## 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=2000
## 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=600000
## 配置一个连接在池中最大生存的时间，单位是毫秒
spring.datasource.druid.max-evictable-idle-time-millis=900000
## 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
###     监控统计用的filter:stat
###     日志用的filter:log4j
###     防御sql注入的filter:wall,log4j
spring.datasource.druid.filters=stat,wall
############################################# log4j2 配置日志输出 #######################################################
#logging.config=classpath:log4j2.xml
#spring.datasource.druid.filter.slf4j.enabled=true
#spring.datasource.druid.filter.slf4j.statement-create-after-log-enabled=false
#spring.datasource.druid.filter.slf4j.statement-close-after-log-enabled=false
#spring.datasource.druid.filter.slf4j.result-set-open-after-log-enabled=false
#spring.datasource.druid.filter.slf4j.result-set-close-after-log-enabled=false
############################################# log4j2 配置日志输出 #######################################################
### mybatis config ###
mybatis-plus.mapper-locations=classpath*:/mapper/**/*.xml
mybatis-plus.type-aliases-package=com.dream.seata.order.server.entity
